const admin = require('firebase-admin');
const mercadopago = require('mercadopago');

// Configure o Mercado Pago com seu Access Token
mercadopago.configure({
    access_token: process.env.MERCADOPAGO_ACCESS_TOKEN,
});

// Inicializa o Firebase Admin SDK apenas uma vez
if (!admin.apps.length) {
    admin.initializeApp({
        credential: admin.credential.cert({
            projectId: process.env.FIREBASE_PROJECT_ID,
            privateKey: process.env.FIREBASE_PRIVATE_KEY.replace(/\n/g, '\n'),
            clientEmail: process.env.FIREBASE_CLIENT_EMAIL,
        }),
        databaseURL: process.env.FIREBASE_DATABASE_URL,
    });
}

const db = admin.database();

// Fun√ß√£o para atualizar o saldo total automaticamente
async function updateTotalAmount(newPaymentAmount, donorName) {
    try {
        console.log(`üßÆ Atualizando saldo total com nova doa√ß√£o de R$ ${newPaymentAmount}`);
        
        // Busca o valor atual do total
        const totalRef = db.ref('donations/total_amount');
        const currentTotalSnapshot = await totalRef.once('value');
        const currentTotal = parseFloat(currentTotalSnapshot.val() || '0');
        
        // Calcula o novo total
        const newTotal = currentTotal + newPaymentAmount;
        
        console.log(`üí∞ Saldo anterior: R$ ${currentTotal.toFixed(2)}`);
        console.log(`üí∞ Nova doa√ß√£o: R$ ${newPaymentAmount.toFixed(2)}`);
        console.log(`üí∞ Novo saldo total: R$ ${newTotal.toFixed(2)}`);
        
        // Atualiza o total no Firebase
        await totalRef.set(newTotal.toFixed(1));
        
        // Atualiza o √∫ltimo doador
        const lastDonorRef = db.ref('donations/last_donor');
        await lastDonorRef.set(donorName);
        
        // Verifica e atualiza o maior doador se necess√°rio
        await updateTopDonorIfNeeded(newPaymentAmount, donorName);
        
        console.log(`‚úÖ Firebase atualizado automaticamente!`);
        console.log(`   - Total: R$ ${newTotal.toFixed(2)}`);
        console.log(`   - √öltimo doador: ${donorName}`);
        
        return newTotal;
        
    } catch (error) {
        console.error('‚ùå Erro ao atualizar saldo total:', error);
        throw error;
    }
}

// Fun√ß√£o para verificar e atualizar o maior doador
async function updateTopDonorIfNeeded(newAmount, donorName) {
    try {
        // Busca informa√ß√µes do maior doador atual
        const topDonorRef = db.ref('donations/top_donor');
        const topAmountRef = db.ref('donations/top_amount');
        
        const [topDonorSnapshot, topAmountSnapshot] = await Promise.all([
            topDonorRef.once('value'),
            topAmountRef.once('value')
        ]);
        
        const currentTopDonor = topDonorSnapshot.val() || '';
        const currentTopAmount = parseFloat(topAmountSnapshot.val() || '0');
        
        console.log(`üèÜ Maior doa√ß√£o atual: R$ ${currentTopAmount.toFixed(2)} por ${currentTopDonor}`);
        console.log(`üîç Verificando se R$ ${newAmount.toFixed(2)} de ${donorName} √© maior...`);
        
        if (newAmount > currentTopAmount) {
            console.log(`üéâ Nova maior doa√ß√£o! Atualizando recordes...`);
            await Promise.all([
                topDonorRef.set(donorName),
                topAmountRef.set(newAmount.toFixed(2))
            ]);
            console.log(`‚úÖ Novo maior doador: ${donorName} com R$ ${newAmount.toFixed(2)}`);
        } else {
            console.log(`üìä Doa√ß√£o n√£o supera o recorde atual de R$ ${currentTopAmount.toFixed(2)}`);
        }
        
    } catch (error) {
        console.error('‚ùå Erro ao verificar maior doador:', error);
    }
}

module.exports = async (req, res) => {
    // Log de entrada sempre ativo
    console.log(`\nüîî [${new Date().toISOString()}] Webhook do Mercado Pago recebido!`);
    console.log(`üìã M√©todo: ${req.method}`);
    console.log(`ÔøΩ Headers:`, JSON.stringify(req.headers, null, 2));
    console.log(`üìã Corpo da requisi√ß√£o:`, JSON.stringify(req.body, null, 2));
    
    if (req.method !== 'POST') {
        console.log('‚ùå M√©todo n√£o permitido:', req.method);
        return res.status(405).send('Method Not Allowed');
    }

    const paymentId = req.body.data?.id;
    const topic = req.body.type;
    
    console.log(`üîç Extra√≠do da requisi√ß√£o:`);
    console.log(`   - Topic: ${topic}`);
    console.log(`   - Payment ID: ${paymentId}`);

    if (topic === 'payment' && paymentId) {
        try {
            // Busca os detalhes do pagamento no Mercado Pago
            console.log(`üîç Consultando pagamento ${paymentId} no Mercado Pago...`);
            
            // Faz requisi√ß√£o manual para garantir que pega todos os dados
            const response = await fetch(`https://api.mercadopago.com/v1/payments/${paymentId}?expand=payer`, {
                method: 'GET',
                headers: {
                    'Authorization': `Bearer ${process.env.MERCADOPAGO_ACCESS_TOKEN}`,
                    'Content-Type': 'application/json'
                }
            });
            
            if (!response.ok) {
                throw new Error(`API Error: ${response.status} - ${response.statusText}`);
            }
            
            const paymentData = await response.json();
            console.log(`‚úÖ Dados recebidos da API do Mercado Pago`);
            
            // Log completo dos dados para an√°lise
            console.log(`üìã Dados completos do pagamento:`, JSON.stringify(paymentData, null, 2));
            
            const status = paymentData.status;
            const amount = parseFloat(paymentData.transaction_amount || 0);
            const paymentMethod = paymentData.payment_method_id || 'N/A';
            
            // Extra√ß√£o avan√ßada de dados do pagador com logs detalhados
            let donorName = 'Doador An√¥nimo';
            let donorEmail = '';
            let donorPhone = '';
            let donorDocument = '';
            
            console.log(`üîç Analisando dados do pagador...`);
            
            // üéØ PRIMEIRO: Tenta extrair do external_reference (dados do formul√°rio)
            if (paymentData.external_reference) {
                try {
                    console.log(`üìã External reference encontrado: ${paymentData.external_reference}`);
                    const donorInfo = JSON.parse(paymentData.external_reference);
                    
                    if (donorInfo.name && donorInfo.name.trim()) {
                        donorName = donorInfo.name.trim();
                        console.log(`‚úÖ Nome extra√≠do do formul√°rio: ${donorName}`);
                    }
                    
                    if (donorInfo.email && donorInfo.email.trim()) {
                        donorEmail = donorInfo.email.trim();
                        console.log(`‚úÖ Email extra√≠do do formul√°rio: ${donorEmail}`);
                    }
                    
                    if (donorInfo.phone && donorInfo.phone.trim()) {
                        donorPhone = donorInfo.phone.trim();
                        console.log(`‚úÖ Telefone extra√≠do do formul√°rio: ${donorPhone}`);
                    }
                    
                    console.log(`üéØ Dados do doador extra√≠dos do formul√°rio com sucesso!`);
                    
                } catch (parseError) {
                    console.log(`‚ö†Ô∏è Erro ao fazer parse do external_reference:`, parseError.message);
                }
            }
            
            // Se n√£o conseguiu extrair do external_reference, tenta do payer object
            if (donorName === 'Doador An√¥nimo') {
                console.log(`   - Payer object existe:`, !!paymentData.payer);
                
                if (paymentData.payer) {
                    console.log(`üìã Dados do payer dispon√≠veis:`, JSON.stringify(paymentData.payer, null, 2));
                    
                    // Nome completo ou primeiro nome
                    if (paymentData.payer.first_name && paymentData.payer.last_name) {
                        donorName = `${paymentData.payer.first_name} ${paymentData.payer.last_name}`;
                        console.log(`‚úÖ Nome completo encontrado: ${donorName}`);
                    } else if (paymentData.payer.first_name) {
                        donorName = paymentData.payer.first_name;
                        console.log(`‚úÖ Primeiro nome encontrado: ${donorName}`);
                    } else if (paymentData.payer.name) {
                        donorName = paymentData.payer.name;
                        console.log(`‚úÖ Nome direto encontrado: ${donorName}`);
                    } else {
                        console.log(`‚ö†Ô∏è Nenhum nome encontrado nos dados do pagador`);
                        // Tenta extrair de outros campos poss√≠veis
                        if (paymentData.additional_info?.payer?.first_name) {
                            donorName = paymentData.additional_info.payer.first_name;
                            console.log(`‚úÖ Nome encontrado em additional_info: ${donorName}`);
                        }
                    }
                    
                    // Email do pagador (se n√£o veio do formul√°rio)
                    if (!donorEmail) {
                        donorEmail = paymentData.payer.email || '';
                        if (!donorEmail && paymentData.additional_info?.payer?.email) {
                            donorEmail = paymentData.additional_info.payer.email;
                        }
                        console.log(`üìß Email encontrado: ${donorEmail || 'N√£o informado'}`);
                    }
                    
                    // Telefone do pagador (se n√£o veio do formul√°rio)
                    if (!donorPhone) {
                        if (paymentData.payer.phone) {
                            donorPhone = paymentData.payer.phone.number || '';
                            console.log(`üì± Telefone encontrado: ${donorPhone || 'N√£o informado'}`);
                        } else if (paymentData.additional_info?.payer?.phone?.number) {
                            donorPhone = paymentData.additional_info.payer.phone.number;
                            console.log(`üì± Telefone encontrado em additional_info: ${donorPhone}`);
                        } else {
                            console.log(`üì± Telefone: N√£o informado`);
                        }
                    }
                    
                    // Documento do pagador (CPF)
                    if (paymentData.payer.identification) {
                        donorDocument = paymentData.payer.identification.number || '';
                        console.log(`üÜî Documento encontrado: ${donorDocument ? donorDocument.replace(/(\d{3})(\d{3})(\d{3})(\d{2})/, '$1.***.**$4') : 'N√£o informado'}`);
                    } else if (paymentData.additional_info?.payer?.identification?.number) {
                        donorDocument = paymentData.additional_info.payer.identification.number;
                        console.log(`üÜî Documento encontrado em additional_info: ${donorDocument.replace(/(\d{3})(\d{3})(\d{3})(\d{2})/, '$1.***.**$4')}`);
                    } else {
                        console.log(`üÜî Documento: N√£o informado`);
                    }
                } else {
                    console.log(`‚ùå Objeto 'payer' n√£o encontrado nos dados do pagamento!`);
                    console.log(`üîç Tentando buscar em additional_info...`);
                    
                    if (paymentData.additional_info?.payer) {
                        console.log(`üìã Dados em additional_info.payer:`, JSON.stringify(paymentData.additional_info.payer, null, 2));
                        
                        const additionalPayer = paymentData.additional_info.payer;
                        if (additionalPayer.first_name) {
                            donorName = additionalPayer.last_name ? 
                                `${additionalPayer.first_name} ${additionalPayer.last_name}` : 
                                additionalPayer.first_name;
                            console.log(`‚úÖ Nome encontrado em additional_info: ${donorName}`);
                        }
                        
                        if (!donorEmail) donorEmail = additionalPayer.email || '';
                        if (!donorPhone) donorPhone = additionalPayer.phone?.number || '';
                        donorDocument = additionalPayer.identification?.number || '';
                    }
                }
            }
            
            // Informa√ß√µes adicionais para PIX
            let pixInfo = '';
            if (paymentMethod === 'pix') {
                if (paymentData.point_of_interaction?.transaction_data?.pix_qr_code) {
                    pixInfo = 'QR Code PIX';
                } else {
                    pixInfo = 'PIX Copia e Cola';
                }
            }
            
            console.log(`üí≥ Pagamento ${paymentId}:`);
            console.log(`   - Status: ${status}`);
            console.log(`   - Valor: R$ ${amount.toFixed(2)}`);
            console.log(`   - M√©todo: ${paymentMethod} ${pixInfo ? `(${pixInfo})` : ''}`);
            console.log(`   - Doador: ${donorName}`);
            console.log(`   - Email: ${donorEmail}`);
            console.log(`   - Telefone: ${donorPhone}`);
            console.log(`   - Documento: ${donorDocument ? donorDocument.replace(/(\d{3})(\d{3})(\d{3})(\d{2})/, '$1.***.**$4') : 'N/A'}`);

            if (status === 'approved') {
                console.log(`‚úÖ Pagamento aprovado! Processando automaticamente...`);
                
                // Atualiza o status do pagamento para o ESP32 detectar
                const paymentStatusRef = db.ref('payment_status/status');
                await paymentStatusRef.set('approved');
                
                // AUTOM√ÅTICO: Atualiza o saldo total e informa√ß√µes dos doadores
                await updateTotalAmount(amount, donorName);
                
                // Registra o hist√≥rico completo da doa√ß√£o
                const historyRef = db.ref('donations/history').push();
                await historyRef.set({
                    payment_id: paymentId,
                    amount: amount.toFixed(2),
                    donor_name: donorName,
                    donor_email: donorEmail,
                    donor_phone: donorPhone,
                    donor_document: donorDocument ? donorDocument.replace(/(\d{3})(\d{3})(\d{3})(\d{2})/, '$1.***.**$4') : '',
                    payment_method: paymentMethod,
                    pix_info: pixInfo,
                    timestamp: admin.database.ServerValue.TIMESTAMP,
                    status: 'approved',
                    processed_at: new Date().toISOString()
                });
                
                console.log(`üìù Doa√ß√£o registrada no hist√≥rico com dados completos:`);
                console.log(`   - ID: ${paymentId}`);
                console.log(`   - Doador: ${donorName}`);
                console.log(`   - Email: ${donorEmail}`);
                console.log(`   - Valor: R$ ${amount.toFixed(2)}`);
                console.log(`   - M√©todo: ${paymentMethod} ${pixInfo ? `(${pixInfo})` : ''}`);
                console.log(`üéâ Sistema atualizado automaticamente!`);
                
            } else {
                console.log(`‚è≥ Pagamento com status "${status}" - aguardando aprova√ß√£o`);
                
                // Atualiza status para outros estados (pending, rejected, etc.)
                const paymentStatusRef = db.ref('payment_status/status');
                await paymentStatusRef.set(status);
            }

            // Responde ao Mercado Pago que o webhook foi processado
            return res.status(200).json({
                message: 'Webhook processado com sucesso',
                payment_id: paymentId,
                status: status,
                processed_at: new Date().toISOString()
            });

        } catch (error) {
            console.error('‚ùå Erro ao processar webhook:', error);
            
            // Registra o erro no Firebase para debugging
            const errorRef = db.ref('webhook_errors').push();
            await errorRef.set({
                payment_id: paymentId,
                error: error.message,
                timestamp: admin.database.ServerValue.TIMESTAMP,
                request_body: req.body
            });
            
            return res.status(500).json({
                error: 'Erro interno ao processar webhook',
                payment_id: paymentId
            });
        }
    } else {
        console.log('‚ö†Ô∏è Notifica√ß√£o de webhook n√£o relevante ou inv√°lida');
        console.log(`   - Topic: ${topic}`);
        console.log(`   - Payment ID: ${paymentId}`);
        
        return res.status(400).json({
            error: 'Requisi√ß√£o inv√°lida',
            received_topic: topic,
            received_payment_id: paymentId
        });
    }
};